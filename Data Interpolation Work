{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPxeOiINbvNMqrcxytgpcs1"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","import math\n","import numpy as np\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from scipy import stats\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler, LabelEncoder\n","from sklearn.linear_model import LinearRegression\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.ensemble import StackingRegressor\n","from sklearn.metrics import mean_squared_error, mean_absolute_error, confusion_matrix\n","import xgboost as xgb"],"metadata":{"id":"YLwxDX1j8WIx","executionInfo":{"status":"ok","timestamp":1702607623001,"user_tz":360,"elapsed":14123,"user":{"displayName":"ANDREW SHIH","userId":"12937166456494167790"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["Colummn Wise Descriptions"],"metadata":{"id":"yzK3MWa4gFGw"}},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D1YLLwTs8H9C","executionInfo":{"status":"ok","timestamp":1702607642971,"user_tz":360,"elapsed":19983,"user":{"displayName":"ANDREW SHIH","userId":"12937166456494167790"}},"outputId":"107017d5-b5cf-4ff7-b63f-375789f7f0a9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","               Price         Carat    Cut  Color Clarity         Depth         Table             X             Y             Z\n","25%       950.000000      0.400000    NaN    NaN     NaN     61.000000     56.000000      4.710000      4.720000      2.910000\n","50%      2401.000000      0.700000    NaN    NaN     NaN     61.800000     57.000000      5.700000      5.710000      3.530000\n","75%      5324.250000      1.040000    NaN    NaN     NaN     62.500000     59.000000      6.540000      6.540000      4.040000\n","count   53940.000000  53940.000000  53940  53940   53940  53940.000000  53940.000000  53940.000000  53940.000000  53940.000000\n","freq             NaN           NaN  21551  11292   13065           NaN           NaN           NaN           NaN           NaN\n","max     18823.000000      5.010000    NaN    NaN     NaN     79.000000     95.000000     10.740000     58.900000     31.800000\n","mean     3932.799722      0.797940    NaN    NaN     NaN     61.749405     57.457184      5.731157      5.734526      3.538734\n","min       326.000000      0.200000    NaN    NaN     NaN     43.000000     43.000000      0.000000      0.000000      0.000000\n","std      3989.439738      0.474011    NaN    NaN     NaN      1.432621      2.234491      1.121761      1.142135      0.705699\n","top              NaN           NaN  Ideal      G     SI1           NaN           NaN           NaN           NaN           NaN\n","unique           NaN           NaN      5      7       8           NaN           NaN           NaN           NaN           NaN\n","   Unnamed: 0  carat      cut color clarity  depth  table  price     x     y  \\\n","0           1   0.23    Ideal     E     SI2   61.5   55.0    326  3.95  3.98   \n","1           2   0.21  Premium     E     SI1   59.8   61.0    326  3.89  3.84   \n","2           3   0.23     Good     E     VS1   56.9   65.0    327  4.05  4.07   \n","3           4   0.29  Premium     I     VS2   62.4   58.0    334  4.20  4.23   \n","4           5   0.31     Good     J     SI2   63.3   58.0    335  4.34  4.35   \n","\n","      z  \n","0  2.43  \n","1  2.31  \n","2  2.31  \n","3  2.63  \n","4  2.75  \n"]}],"source":["from google.colab import drive\n","drive.mount(\"/content/drive\", force_remount=True)\n","rawDataDf = pd.read_csv('/content/drive/MyDrive/ECE 539 Project/Data/diamonds.csv')\n","rawDataDf.head()\n","# Get the description for each column\n","price_desc = rawDataDf['price'].describe()\n","carat_desc = rawDataDf['carat'].describe()\n","cut_desc = rawDataDf['cut'].describe()\n","color_desc = rawDataDf['color'].describe()\n","clarity_desc = rawDataDf['clarity'].describe()\n","depth_desc = rawDataDf['depth'].describe()\n","table_desc = rawDataDf['table'].describe()\n","x_describe = rawDataDf['x'].describe()\n","y_describe = rawDataDf['y'].describe()\n","z_describe = rawDataDf['z'].describe()\n","\n","# Create a new DataFrame with these descriptions\n","stats_df = pd.DataFrame({'Price': price_desc,\n","                         'Carat': carat_desc,\n","                         'Cut': cut_desc,\n","                         'Color': color_desc,\n","                         'Clarity': clarity_desc,\n","                         'Depth': depth_desc,\n","                         'Table': table_desc,\n","                         'X': x_describe,\n","                         'Y': y_describe,\n","                         'Z': z_describe,})\n","print(stats_df.to_string())\n","print(rawDataDf.head())"]},{"cell_type":"code","source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import matplotlib.ticker as ticker\n","\n","# Assuming rawDataDf is your DataFrame\n","plt.figure(figsize=(10, 6))\n","plt.hist(rawDataDf['carat'], bins=150)\n","plt.title('Frequency of Carat Values')\n","plt.xlabel('Carat')\n","plt.ylabel('Frequency')\n","\n","# Setting more tick marks on the x-axis and labeling them\n","ax = plt.gca()  # Get current axis\n","ax.xaxis.set_major_locator(ticker.AutoLocator())  # Automatic major tick placement\n","ax.xaxis.set_minor_locator(ticker.AutoMinorLocator())  # Minor ticks\n","\n","# Format major tick labels\n","ax.xaxis.set_major_formatter(ticker.ScalarFormatter())\n","\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"IhVD7iP0VMMU","executionInfo":{"status":"ok","timestamp":1702608689023,"user_tz":360,"elapsed":1197,"user":{"displayName":"ANDREW SHIH","userId":"12937166456494167790"}},"outputId":"a55f8f87-2f51-4dfa-97b1-4e925f540ec3"},"execution_count":25,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def preprocess_diamonds_data(raw_data, apply_encoding=True, use_one_hot=True, standard_scale_xyz=True, z_score_normalize=True):\n","    \"\"\"\n","    Preprocesses the diamonds dataset with options for encoding, standard scaling, and z-score normalization.\n","\n","    Parameters:\n","    - raw_data (pd.DataFrame): The raw DataFrame to preprocess.\n","    - apply_encoding (bool): If True, applies encoding to categorical data (either one-hot or ordinal). Defaults to True.\n","    - use_one_hot (bool): Determines the type of encoding; if True, applies one-hot encoding, otherwise applies ordinal encoding. Ignored if apply_encoding is False. Defaults to True.\n","    - standard_scale_xyz (bool): If True, applies standard scaling to 'x', 'y', 'z' columns. Defaults to True.\n","    - z_score_normalize (bool): If True, applies z-score normalization and removes outliers. Defaults to True.\n","\n","    Returns:\n","    - pd.DataFrame: The preprocessed DataFrame.\n","    \"\"\"\n","\n","    data = raw_data.copy()\n","\n","    # Basic preprocessing\n","    if \"Unnamed: 0\" in data.columns:\n","        data = data.drop([\"Unnamed: 0\"], axis=1)\n","    data = data[(data.x != 0) & (data.y != 0) & (data.z != 0)]\n","    data.dropna(subset=['table', 'depth', 'carat', 'price'], inplace=True)\n","    data.drop_duplicates(inplace=True)\n","\n","    # Encoding categorical data\n","    if apply_encoding:\n","        if use_one_hot:\n","            data = pd.get_dummies(data, columns=['cut', 'color', 'clarity'], prefix=['cut', 'color', 'clarity'])\n","        else:\n","            for column, order in [('clarity', ['IF', 'VVS1', 'VVS2', 'VS1', 'VS2', 'SI1', 'SI2', 'I1'][::-1]),\n","                                  ('cut', ['Ideal', 'Premium', 'Very Good', 'Good', 'Fair'][::-1]),\n","                                  ('color', sorted(raw_data['color'].unique())[::-1])]:\n","                mapping = {category: i for i, category in enumerate(order)}\n","                data[column] = data[column].map(mapping)\n","\n","    # Standard scaling for 'x', 'y', 'z'\n","    if standard_scale_xyz:\n","        standard_scalar = StandardScaler()\n","        data[['x', 'y', 'z']] = standard_scalar.fit_transform(data[['x', 'y', 'z']])\n","\n","    # Z-score normalization and outlier removal\n","    if z_score_normalize:\n","        z_scores = np.abs(stats.zscore(data.select_dtypes(include=[np.number])))\n","        threshold = 3\n","        data = data[(z_scores < threshold).all(axis=1)]\n","\n","    return data"],"metadata":{"id":"W83dXRQGLl-L","executionInfo":{"status":"ok","timestamp":1702607642971,"user_tz":360,"elapsed":3,"user":{"displayName":"ANDREW SHIH","userId":"12937166456494167790"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["time_data.dropna(inplace=True)\n","plt.figure(figsize=(10, 6))  # Set the figure size\n","for column in time_data.columns[2:]:\n","    plt.plot(time_data.iloc[:, 1], time_data[column], label=column)\n","plt.xlabel('Date')  # Assuming column 1 is a Date\n","plt.ylabel('Values')\n","plt.title('Time Series Data')\n","plt.legend()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":254},"id":"am4dI57PCRQ6","executionInfo":{"status":"error","timestamp":1702607643380,"user_tz":360,"elapsed":411,"user":{"displayName":"ANDREW SHIH","userId":"12937166456494167790"}},"outputId":"9c32637d-e2c5-4fc7-d74b-7039cb3fc5a0"},"execution_count":4,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-0beefb24b014>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtime_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Set the figure size\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcolumn\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtime_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtime_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtime_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcolumn\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcolumn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Date'\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Assuming column 1 is a Date\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'time_data' is not defined"]}]},{"cell_type":"code","source":["plt.figure(figsize=(10, 6))  # Set the figure size\n","for column in time_data.columns[2:]:\n","    plt.plot(time_data.iloc[:, 1], time_data[column], label=column)\n","plt.xlabel('Date')  # Assuming column 1 is a Date\n","plt.ylabel('Values')\n","plt.title('Time Series Data')\n","plt.legend()\n","plt.show()"],"metadata":{"id":"yzKc_A4DPQDg","colab":{"base_uri":"https://localhost:8080/","height":272},"executionInfo":{"status":"error","timestamp":1702607722696,"user_tz":360,"elapsed":178,"user":{"displayName":"ANDREW SHIH","userId":"12937166456494167790"}},"outputId":"51a928c2-2a60-42ee-9ab6-6d9517865800"},"execution_count":5,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-4bb76b26cb6e>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Set the figure size\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mcolumn\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtime_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtime_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtime_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcolumn\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcolumn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Date'\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Assuming column 1 is a Date\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Values'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'time_data' is not defined"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":["time_data['date'].min(), time_data['date'].max()"],"metadata":{"id":"Psdk9FO4DzTc","executionInfo":{"status":"aborted","timestamp":1702607643381,"user_tz":360,"elapsed":4,"user":{"displayName":"ANDREW SHIH","userId":"12937166456494167790"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.dates as mdates\n","time_data.iloc[:, 1] = pd.to_datetime(time_data.iloc[:, 1])\n","\n","plt.figure(figsize=(10, 6))  # Set the figure size\n","plt.plot(time_data.iloc[:, 1], time_data['diamond price'], label='Diamond Price')\n","\n","# Format the dates on the x-axis\n","plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))  # Format of the date\n","plt.gca().xaxis.set_major_locator(mdates.MonthLocator(interval=3))  # Interval: every 6 months\n","\n","plt.xlabel('Date')  # Assuming column 1 is a Date\n","plt.ylabel('Values')\n","plt.title('Time Series Data')\n","plt.legend()\n","\n","# Rotate date labels for better legibility\n","plt.gcf().autofmt_xdate()\n","\n","plt.show()"],"metadata":{"id":"qgE5ewL5DX45","executionInfo":{"status":"aborted","timestamp":1702607643381,"user_tz":360,"elapsed":3,"user":{"displayName":"ANDREW SHIH","userId":"12937166456494167790"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Data imports and basic preprocessing\n","time_transformation = pd.read_csv('/content/drive/MyDrive/ECE 539 Project/Data/Time Series Transformation.csv')\n","time_transformation = time_transformation.dropna()\n","time_transformation = time_transformation.reset_index()\n","raw_dia_data = pd.read_csv('/content/drive/MyDrive/ECE 539 Project/Data/diamonds.csv')\n","coded_dia_data = preprocess_diamonds_data(raw_dia_data, use_one_hot=False, z_score_normalize=False)  # pd.get_dummies(raw_dia_data, columns=['cut', 'color', 'clarity'], prefix=['cut', 'color', 'clarity'])\n","bin1 = coded_dia_data[coded_dia_data['carat'] < 0.5]\n","bin2 = coded_dia_data[(coded_dia_data['carat'] >= 0.5) & (coded_dia_data['carat'] < 1)]\n","bin3 = coded_dia_data[(coded_dia_data['carat'] >= 1) & (coded_dia_data['carat'] < 2)]\n","bin4 = coded_dia_data[(coded_dia_data['carat'] >= 2) & (coded_dia_data['carat'] < 3)]\n","bin5 = coded_dia_data[(coded_dia_data['carat'] >= 3) & (coded_dia_data['carat'] < 4)]\n","bin6 = coded_dia_data[coded_dia_data['carat'] >= 4]"],"metadata":{"id":"qWlD2tR2SAJu","executionInfo":{"status":"ok","timestamp":1702607756907,"user_tz":360,"elapsed":722,"user":{"displayName":"ANDREW SHIH","userId":"12937166456494167790"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["def expat_forward(time_values, bins, bin_name, date = 'July-2017'):\n","    \"\"\"\n","    Extrapolates prices in a DataFrame (bins) forward from a specified date,\n","    using change factors from time_values.\n","\n","    This function creates a 3D tensor with extrapolated prices after the given date.\n","    Each slice along the first axis represents a time step's prices, calculated by\n","    multiplying the 'price' column in 'bins' by (1 + change factor) from time_values.\n","\n","    Parameters:\n","    - time_values (pd.DataFrame): DataFrame with 'Date' and change factors.\n","    - bins (pd.DataFrame): DataFrame containing 'price' to extrapolate.\n","    - bin_name (str): Name of the column in time_values for change factor.\n","    - date (str): Start date for extrapolation, format 'Month-Year'.\n","\n","    Returns:\n","    - np.ndarray: 3D tensor with extrapolated prices over time.\n","    \"\"\"\n","    # Define the starting index\n","    start_index = time_values.index[time_values['Date'] == date][0]\n","    # Extract the change data for the current bin\n","    change_data = time_values.loc[start_index:, bin_name]\n","    # Create the 3D tensor using list comprehension\n","    time_bin_tensor = np.stack([bins.assign(price=bins['price'] * (1 + x)).to_numpy() for x in change_data])\n","    return time_bin_tensor\n","\n","# Example Usage\n","# bins = [bin1, bin2, bin3, bin4, bin5, bin6]\n","# columns = time_transformation.columns[2:]  # Second column is 'Date'\n","# total_data_fut = []\n","# for bin, col in zip(bins, columns):\n","#   data_2_append = expat_forward(time_transformation, bin, col)\n","#   total_data_fut.append(data_2_append)\n","#   print(data_2_append.shape, type(data_2_append))\n","\n","\n","\n","def expat_backward(time_values, bins, bin_name, date = 'July-2017'):\n","    \"\"\"\n","    Extrapolates prices in a DataFrame (bins) backward up to a specified date,\n","    using change factors from time_values.\n","\n","    This function generates a 3D tensor with extrapolated prices before and including\n","    the given date. Each tensor slice represents prices at a time step, determined by\n","    adjusting the 'price' column in 'bins' with the change factor from time_values.\n","\n","    Parameters:\n","    - time_values (pd.DataFrame): DataFrame with 'Date' and change factors.\n","    - bins (pd.DataFrame): DataFrame containing 'price' to extrapolate.\n","    - bin_name (str): Name of the column in time_values for change factor.\n","    - date (str): End date for backward extrapolation, format 'Month-Year'.\n","\n","    Returns:\n","    - np.ndarray: 3D tensor with extrapolated prices over time.\n","    \"\"\"\n","    # Define the starting index\n","    start_index = time_values.index[time_values['Date'] == date][0]\n","    # Extract the change data for the current bin\n","    change_data = time_values.loc[:start_index, bin_name]\n","    # Create the 3D tensor using list comprehension\n","    time_bin_tensor = np.stack([bins.assign(price=bins['price'] * (1 + x)).to_numpy() for x in change_data])\n","    return time_bin_tensor\n","\n","# Example usage\n","# bins = [bin1, bin2, bin3, bin4, bin5, bin6]\n","# columns = time_transformation.columns[2:]  # Second column is 'Date'\n","# total_data_past = []\n","# for bin, col in zip(bins, columns):\n","#   data_2_append = expat_backward(time_transformation, bin, col)\n","#   total_data_past.append(data_2_append)\n","#   print(data_2_append.shape, type(data_2_append))"],"metadata":{"id":"Aci7OvNgOYqL","executionInfo":{"status":"aborted","timestamp":1702607643382,"user_tz":360,"elapsed":4,"user":{"displayName":"ANDREW SHIH","userId":"12937166456494167790"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bins = [bin1, bin2, bin3, bin4, bin5, bin6]\n","columns = time_transformation.columns[2:]  # Second column is 'Date'\n","total_data = []\n","\n","for bin, col in zip(bins, columns):\n","    data_app_for = expat_forward(time_transformation, bin, col)\n","    data_app_back = expat_backward(time_transformation, bin, col)\n","    data_2_append = np.concatenate((data_app_back, data_app_for), axis=0)\n","    total_data.append(data_2_append)\n","    print(data_2_append.shape, type(data_2_append))\n","\n","# Concatenate the arrays along the second axis\n","total_data = np.concatenate(total_data, axis=1)\n","print(total_data.shape, type(total_data))\n","total_data = tf.convert_to_tensor(total_data)"],"metadata":{"id":"NpGFpOK4xJLa","executionInfo":{"status":"aborted","timestamp":1702607643382,"user_tz":360,"elapsed":4,"user":{"displayName":"ANDREW SHIH","userId":"12937166456494167790"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["raw_dia_data.drop('Unnamed: 0', axis = 1).columns"],"metadata":{"id":"ObJ7XGThK3wK","executionInfo":{"status":"aborted","timestamp":1702607643382,"user_tz":360,"elapsed":4,"user":{"displayName":"ANDREW SHIH","userId":"12937166456494167790"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["columns = raw_dia_data.drop('Unnamed: 0', axis = 1).columns\n","total_intervals = total_data.shape[0]\n","\n","# Determine the number of rows and columns for subplots\n","# For example, if you have 10 intervals, you might want a 2x5 grid of subplots\n","n_rows = math.ceil(math.sqrt(total_intervals))\n","n_cols = math.ceil(total_intervals / n_rows)\n","\n","# Create a figure to hold all subplots\n","plt.figure(figsize=(n_cols * 5, n_rows * 4))\n","\n","for i in range(total_intervals):\n","    # Convert the i-th slice of the tensor to a DataFrame\n","    df = pd.DataFrame(total_data[i].numpy(), columns=columns)\n","\n","    # Add a subplot for each interval\n","    plt.subplot(n_rows, n_cols, i + 1)\n","    plt.hist(df['price'], bins=20, color='blue', alpha=0.7)\n","    plt.title(f'Interval {i}')\n","    plt.xlabel('Price')\n","    plt.ylabel('Frequency')\n","\n","# Adjust layout to prevent overlapping\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"id":"K4UODDTkj6FB","executionInfo":{"status":"aborted","timestamp":1702607643382,"user_tz":360,"elapsed":4,"user":{"displayName":"ANDREW SHIH","userId":"12937166456494167790"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = coded_dia_data\n","plt.hist(df['price'], bins=20, color='blue', alpha=0.7)\n","plt.xlabel('Price')\n","plt.ylabel('Frequency')"],"metadata":{"id":"Zqfb_07SkBEa","executionInfo":{"status":"aborted","timestamp":1702607643382,"user_tz":360,"elapsed":4,"user":{"displayName":"ANDREW SHIH","userId":"12937166456494167790"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"AE4r3VyHkFOY","executionInfo":{"status":"aborted","timestamp":1702607643382,"user_tz":360,"elapsed":4,"user":{"displayName":"ANDREW SHIH","userId":"12937166456494167790"}}},"execution_count":null,"outputs":[]}]}